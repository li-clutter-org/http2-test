digraph chans {

    har[label="/har/"];
    nexturl[label="/nexturl/"];
    http2har[label="/http2har/"];
    dnsmasq[label="/dnsmasq/"];
    setnexturl[label="/setnexturl/"];
    dnsmasqupdated[label="/dnsmasqupdated/"];
    testurl[label="/testurl/"];
    startbrowserStationA[label="/startbrowser/StationA"];
    killbrowserStationA[label="/killbrowser/StationA"];

    startbrowserStationB[label="/startbrowser/StationB"];
    killbrowserStationB[label="/killbrowser/StationB"];

    spawnHarServer[label="spawnHarServer", shape="egg"];
    dnsdaemon[label="dnsdaemon", shape="hexagon"];
    browserA[label="browser/A", shape="box"];
    browserAresetter[label="browser_resetter/A", shape="hexagon"]
    browserB[label="browser/B", shape="box"];
    browserBresetter[label="browser_resetter/B", shape="hexagon"]
    browserreadyA[label="/browserready/StationA"];
    browserreadyB[label="/browserready/StationB"];
    
    har -> dnsmasq [label="next_dns_masq_chan"];
    har -> killbrowserStationA [label="kill_harvester_browser"];
    killbrowserStationA -> browserAresetter [style="dotted"];
    browserAresetter -> browserreadyA [style="dotted"];
    browserreadyA -> nexturl [label="harvester_ready"];
    har -> spawnHarServer [label="resolve_center_chan"];

    dnsmasq -> dnsdaemon [style="dashed"];

    dnsdaemon -> dnsmasqupdated [style="dashed"];

    dnsmasqupdated -> startbrowserStationB [label="start_tester_browser"];
    startbrowserStationB -> browserBresetter [style="dotted"];
    browserBresetter -> browserreadyB [style="dotted"];
    browserreadyB -> testurl [label="tester_ready"];
    browserB -> testurl [style="dotted"];
    testurl -> browserB [style="dashed"];
    testurl -> killbrowserStationB [label="(if alarm) kill_tester_browser"];
    browserB -> http2har[style="dashed"];

    http2har -> killbrowserStationB [label="kill_tester_browser"];
    killbrowserStationB -> browserBresetter [style="dotted"];


    browserA -> nexturl [style="dotted"];
    nexturl -> browserA [style="dashed"];
    nexturl -> killbrowserStationA [label="(if alarm) kill_harvester_browser"];
    browserA -> har [style="dashed", label="[data]"];

    startbrowserStationA -> browserAresetter [ style="dotted"];

    http2har -> spawnHarServer [label="finish_chan"];

    dnsmasqupdated ->  testurl [label="next_test_url_chan"];

    setnexturl -> startbrowserStationA [label="start_harvester_browser"];
    setnexturl -> nexturl [label="next_harvest_url"];
    setnexturl -> dnsmasqupdated [ label="next_test_url_to_check_chan"]

}
